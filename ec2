#!/usr/bin/env python3

import click
import boto3
import logging
import sys
import re
from datetime import datetime
from typing import Optional, Dict, Any, List
from botocore.exceptions import ClientError, ValidationError
from rich.console import Console
from rich.logging import RichHandler
from rich.progress import Progress, SpinnerColumn, TextColumn
import json
from dataclasses import dataclass

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[RichHandler(rich_tracebacks=True)]
)
logger = logging.getLogger("ec2-cli")
console = Console()

@dataclass
class InstanceConfig:
    """Dataclass to store instance configuration"""
    vpc_id: str
    subnet_id: str
    assign_public_ip: bool
    iam_role: Optional[str]
    security_group_ids: List[str]
    key_name: Optional[str]
    tags: List[Dict[str, str]]

class EC2ValidationError(Exception):
    """Custom exception for EC2 validation errors"""
    pass

class EC2Manager:
    """Manages EC2 operations including backup and restore"""
    
    INSTANCE_ID_PATTERN = re.compile(r'^i-[a-z0-9]{17}$')
    AMI_ID_PATTERN = re.compile(r'^ami-[a-z0-9]{17}$')
    
    def __init__(self, region_name=None, profile_name=None):
        """Initialize EC2 manager with boto3 client"""
        try:
            session = boto3.Session(
                profile_name=profile_name,
                region_name=region_name
            )
            self.ec2 = session.client('ec2')
            self.ec2_resource = session.resource('ec2')
            self.iam = session.client('iam')
        except Exception as e:
            logger.error(f"Failed to initialize AWS client: {str(e)}")
            raise

    def validate_instance_id(self, instance_id: str) -> bool:
        """Validate EC2 instance ID format and existence"""
        if not self.INSTANCE_ID_PATTERN.match(instance_id):
            raise EC2ValidationError(f"Invalid instance ID format: {instance_id}")
        
        try:
            self.ec2.describe_instances(InstanceIds=[instance_id])
            return True
        except ClientError as e:
            if e.response['Error']['Code'] == 'InvalidInstanceID.NotFound':
                raise EC2ValidationError(f"Instance not found: {instance_id}")
            raise

    def get_instance_details(self, instance_id: str) -> Dict[str, Any]:
        """
        Get EC2 instance details, including name tag.

        Args:
            instance_id: EC2 instance ID

        Returns:
            dict: Instance details, including name
        """
        try:
            response = self.ec2.describe_instances(InstanceIds=[instance_id])
            instance = response['Reservations'][0]['Instances'][0]
            tags = instance.get('Tags', [])
            name_tag = next((tag['Value'] for tag in tags if tag['Key'] == 'Name'), instance_id)
            return {
                'name': name_tag
            }
        except ClientError as e:
            logger.error(f"Error getting instance details: {str(e)}")
            raise EC2ValidationError(f"Failed to get instance details: {str(e)}")

    def get_instance_config(self, instance_id: str) -> InstanceConfig:
        """
        Get instance network and security configuration
        
        Args:
            instance_id: EC2 instance ID
            
        Returns:
            InstanceConfig: Instance configuration details
        """
        try:
            response = self.ec2.describe_instances(InstanceIds=[instance_id])
            instance = response['Reservations'][0]['Instances'][0]
            
            # Get IAM role if exists
            iam_role = None
            if instance.get('IamInstanceProfile'):
                try:
                    profile_arn = instance['IamInstanceProfile']['Arn']
                    profile_name = profile_arn.split('/')[-1]
                    iam_role = self.iam.get_instance_profile(InstanceProfileName=profile_name)
                    iam_role = iam_role['InstanceProfile']['Roles'][0]['RoleName']
                except ClientError as e:
                    logger.warning(f"Could not retrieve IAM role for instance {instance_id}: {e}")
                    iam_role = None # Set iam_role to None in case of failure
            
            # Check for public IP assignment
            network_interface = instance.get('NetworkInterfaces', [{}])[0]
            assign_public_ip = bool(network_interface.get('Association'))
            
            return InstanceConfig(
                vpc_id=instance['VpcId'],
                subnet_id=instance['SubnetId'],
                assign_public_ip=assign_public_ip,
                iam_role=iam_role,
                security_group_ids=[sg['GroupId'] for sg in instance['SecurityGroups']],
                key_name=instance.get('KeyName'),
                tags=instance.get('Tags', [])
            )
            
        except (ClientError, IndexError) as e:
            logger.error(f"Error getting instance configuration: {str(e)}")
            raise EC2ValidationError(f"Failed to get instance configuration: {str(e)}")

    def validate_ami_identifier(self, ami_identifier: str) -> str:
        """Validate AMI identifier and return AMI ID"""
        try:
            if self.AMI_ID_PATTERN.match(ami_identifier):
                response = self.ec2.describe_images(ImageIds=[ami_identifier])
                if not response['Images']:
                    raise EC2ValidationError(f"AMI not found: {ami_identifier}")
                return ami_identifier
            else:
                response = self.ec2.describe_images(
                    Filters=[
                        {'Name': 'name', 'Values': [ami_identifier]},
                        {'Name': 'state', 'Values': ['available']}
                    ],
                    Owners=['self']
                )
                if not response['Images']:
                    raise EC2ValidationError(f"No AMI found with name: {ami_identifier}")
                return response['Images'][0]['ImageId']
        except ClientError as e:
            raise EC2ValidationError(f"Error validating AMI: {str(e)}")

    def validate_instance_type(self, instance_type: str) -> bool:
        """Validate if instance type is valid"""
        try:
            response = self.ec2.describe_instance_types(InstanceTypes=[instance_type])
            return bool(response['InstanceTypes'])
        except ClientError:
            raise EC2ValidationError(f"Invalid instance type: {instance_type}")

    def create_ami(self, instance_id: str, timeout: int = 600) -> Optional[str]:
        """Create AMI from EC2 instance"""
        try:
            self.validate_instance_id(instance_id)
            instance_details = self.get_instance_details(instance_id)
            instance_config = self.get_instance_config(instance_id)
            
            current_date = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
            ami_name = f"{instance_details['name']}-backup-{current_date}"
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                transient=True,
            ) as progress:
                progress.add_task(description="Creating AMI...", total=None)
                
                # Store instance configuration in AMI tags
                config_tags = [
                    {'Key': 'VpcId', 'Value': instance_config.vpc_id},
                    {'Key': 'SubnetId', 'Value': instance_config.subnet_id},
                    {'Key': 'AssignPublicIp', 'Value': str(instance_config.assign_public_ip)},
                    {'Key': 'SecurityGroups', 'Value': ','.join(instance_config.security_group_ids)}
                ]
                
                if instance_config.iam_role:
                    config_tags.append({'Key': 'IamRole', 'Value': instance_config.iam_role})
                if instance_config.key_name:
                    config_tags.append({'Key': 'KeyName', 'Value': instance_config.key_name})
                
                try:
                    response = self.ec2.create_image(
                        InstanceId=instance_id,
                        Name=ami_name,
                        Description=f"Backup of {instance_id} created on {current_date}",
                        NoReboot=True,
                        TagSpecifications=[{
                            'ResourceType': 'image',
                            'Tags': config_tags + [
                                {'Key': 'Name', 'Value': ami_name},
                                {'Key': 'SourceInstance', 'Value': instance_id},
                                {'Key': 'CreatedBy', 'Value': 'ec2-cli'},
                                {'Key': 'CreatedAt', 'Value': current_date}
                            ]
                        }]
                    )
                    ami_id = response['ImageId']
                except ClientError as e:
                    logger.error(f"Error creating AMI image: {e}")
                    return None


                progress.add_task(description="Waiting for AMI to be available...", total=None)
                waiter = self.ec2.get_waiter('image_available')
                try:
                    waiter.wait(
                        ImageIds=[ami_id],
                        WaiterConfig={
                            'Delay': 15,
                            'MaxAttempts': min(40, timeout // 15)
                        }
                    )
                except ClientError as e:
                    logger.error(f"Error waiting for AMI to become available: {e}")
                    return None
            
            logger.info(f"Successfully created AMI: {ami_id}")
            return ami_id
            
        except (ClientError, EC2ValidationError) as e:
            logger.error(f"Failed to create AMI: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error creating AMI: {str(e)}")
            return None

    def get_ami_config(self, ami_id: str) -> Optional[InstanceConfig]:
        """Get instance configuration from AMI tags"""
        try:
            response = self.ec2.describe_images(ImageIds=[ami_id])
            if not response['Images']:
                return None
                
            tags = {tag['Key']: tag['Value'] for tag in response['Images'][0].get('Tags', [])}
            
            return InstanceConfig(
                vpc_id=tags.get('VpcId'),
                subnet_id=tags.get('SubnetId'),
                assign_public_ip=tags.get('AssignPublicIp', 'False').lower() == 'true',
                iam_role=tags.get('IamRole'),
                security_group_ids=tags.get('SecurityGroups', '').split(','),
                key_name=tags.get('KeyName'),
                tags=[{'Key': k, 'Value': v} for k, v in tags.items() 
                     if k not in ['VpcId', 'SubnetId', 'AssignPublicIp', 'SecurityGroups', 
                                'IamRole', 'KeyName', 'CreatedBy', 'CreatedAt']]
            )
        except ClientError as e:
            logger.error(f"Error getting AMI configuration: {str(e)}")
            return None

    def restore_instance(self, ami_identifier: str, instance_type: str,
                        source_instance_id: Optional[str] = None) -> Optional[str]:
        """Create new EC2 instance from AMI"""
        try:
            ami_id = self.validate_ami_identifier(ami_identifier)
            self.validate_instance_type(instance_type)
            
            # Get configuration either from source instance or AMI tags
            instance_config = None
            if source_instance_id:
                self.validate_instance_id(source_instance_id)
                instance_config = self.get_instance_config(source_instance_id)
            else:
                instance_config = self.get_ami_config(ami_id)
                
            if not instance_config:
                raise EC2ValidationError("Could not get instance configuration")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                transient=True,
            ) as progress:
                progress.add_task(description="Launching instance...", total=None)
                
                # Create launch specification
                launch_spec = {
                    'ImageId': ami_id,
                    'InstanceType': instance_type,
                    'MaxCount': 1,
                    'MinCount': 1,
                    'NetworkInterfaces': [{
                        'DeviceIndex': 0,
                        'SubnetId': instance_config.subnet_id,
                        'Groups': instance_config.security_group_ids,
                        'AssociatePublicIpAddress': instance_config.assign_public_ip
                    }]
                }
                
                if instance_config.iam_role:
                    launch_spec['IamInstanceProfile'] = {'Name': instance_config.iam_role}
                
                if instance_config.key_name:
                    launch_spec['KeyName'] = instance_config.key_name
                
                # Add tags
                current_date = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
                ami_details = self.ec2.describe_images(ImageIds=[ami_id])['Images'][0]
                ami_name = ami_details.get('Name', 'Unknown')
                instance_name = f"{ami_name}-restored-{current_date}"

                # Remove any existing 'Name' tag to avoid duplication
                filtered_tags = [tag for tag in instance_config.tags if tag['Key'] != 'Name']

                launch_spec['TagSpecifications'] = [{
                    'ResourceType': 'instance',
                    'Tags': filtered_tags + [
                        {'Key': 'Name', 'Value': instance_name},
                        {'Key': 'CreatedBy', 'Value': 'ec2-cli'},
                        {'Key': 'SourceAMI', 'Value': ami_id},
                        {'Key': 'CreatedAt', 'Value': current_date}
                    ]
                }]
                
                try:
                    response = self.ec2.run_instances(**launch_spec)
                    instance_id = response['Instances'][0]['InstanceId']
                except ClientError as e:
                    logger.error(f"Error launching instance: {e}")
                    return None

                progress.add_task(description="Waiting for instance to be running...", total=None)
                waiter = self.ec2.get_waiter('instance_running')
                try:
                    waiter.wait(
                        InstanceIds=[instance_id],
                        WaiterConfig={'Delay': 15, 'MaxAttempts': 40}
                    )
                except ClientError as e:
                    logger.error(f"Error waiting for instance to be running: {e}")
                    return None
            
            logger.info(f"Successfully launched instance: {instance_id}")
            return instance_id
            
        except (ClientError, EC2ValidationError) as e:
            logger.error(f"Failed to restore instance: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error restoring instance: {str(e)}")
            return None

@click.group(name='ec2')
@click.option('--debug', is_flag=True, help='Enable debug logging')
@click.option('--region', help='AWS region name')
@click.option('--profile', help='AWS credential profile name')
def cli(debug, region, profile):
    """EC2 backup and restore operations"""
    if debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Debug mode enabled")

@cli.command()
@click.argument('instance-id')
@click.option('--wait/--no-wait', default=True, help='Wait for AMI to be available')
@click.option('--timeout', default=600, help='Maximum time to wait for AMI creation in seconds')
def backup(instance_id: str, wait: bool, timeout: int):
    """Create an AMI backup of an EC2 instance"""
    try:
        manager = EC2Manager()
        ami_id = manager.create_ami(instance_id, timeout=timeout)
        
        if ami_id:
            result = {
                'status': 'success',
                'ami_id': ami_id,
                'instance_id': instance_id,
                'timestamp': datetime.now().isoformat()
            }
            console.print(json.dumps(result, indent=2))
            sys.exit(0)
        else:
            error_result = {
                'status': 'error',
                'error': 'Failed to create AMI',
                'timestamp': datetime.now().isoformat()
            }
            console.print(json.dumps(error_result, indent=2))
            sys.exit(1)
    except Exception as e:
        logger.error(f"Command failed: {str(e)}")
        error_result = {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }
        console.print(json.dumps(error_result, indent=2))
        sys.exit(1)
              
@cli.command()
@click.argument('ami-identifier')
@click.argument('instance-type')
@click.option('--source-instance', help='Source instance ID to copy configuration from')
@click.option('--wait/--no-wait', default=True, help='Wait for instance to be running')
@click.option('--timeout', default=600, help='Maximum time to wait for instance launch in seconds')
def restore(ami_identifier: str, instance_type: str, source_instance: Optional[str], 
           wait: bool, timeout: int):
    """Create a new EC2 instance from an AMI"""
    try:
        manager = EC2Manager()
        instance_id = manager.restore_instance(
            ami_identifier, 
            instance_type,
            source_instance_id=source_instance
        )
        
        if instance_id:
            result = {
                'status': 'success',
                'instance_id': instance_id,
                'ami_identifier': ami_identifier,
                'instance_type': instance_type,
                'source_instance': source_instance,
                'timestamp': datetime.now().isoformat()
            }
            console.print(json.dumps(result, indent=2))
            sys.exit(0)
        else:
            error_result = {
                'status': 'error',
                'error': 'Failed to create instance',
                'timestamp': datetime.now().isoformat()
            }
            console.print(json.dumps(error_result, indent=2))
            sys.exit(1)
    except Exception as e:
        logger.error(f"Command failed: {str(e)}")
        error_result = {
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }
        console.print(json.dumps(error_result, indent=2))
        sys.exit(1)

if __name__ == '__main__':
    cli()
